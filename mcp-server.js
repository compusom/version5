#!/usr/bin/env node

/**
 * Meta Ads Creative Assistant - MCP Server
 * 
 * Este es un servidor MCP independiente que puede ser usado directamente
 * por clientes MCP como Claude Desktop, Cursor, etc.
 * 
 * Uso:
 *   node mcp-server.js
 * 
 * Para usar con Claude Desktop, a√±ade esto a tu configuraci√≥n:
 * {
 *   "mcpServers": {
 *     "meta-ads-assistant": {
 *       "command": "node",
 *       "args": ["/path/to/your/project/mcp-server.js"]
 *     }
 *   }
 * }
 */

const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
const { StdioServerTransport } = require('@modelcontextprotocol/sdk/server/stdio.js');
const {
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} = require('@modelcontextprotocol/sdk/types.js');

// Configuraci√≥n del servidor
const SERVER_INFO = {
  name: 'meta-ads-creative-assistant',
  version: '1.0.0',
};

const TOOLS = [
  {
    name: 'analyze_creative',
    description: 'Analiza creativos publicitarios de Meta Ads usando AI',
    inputSchema: {
      type: 'object',
      properties: {
        creative_url: {
          type: 'string',
          description: 'URL del creativo a analizar',
        },
        creative_text: {
          type: 'string',
          description: 'Texto del creativo publicitario',
        },
        campaign_type: {
          type: 'string',
          description: 'Tipo de campa√±a (awareness, conversion, engagement, etc.)',
          enum: ['awareness', 'conversion', 'engagement', 'traffic', 'leads', 'sales']
        },
        target_audience: {
          type: 'string',
          description: 'Descripci√≥n del p√∫blico objetivo',
        },
      },
      required: ['creative_text'],
    },
  },
  {
    name: 'get_campaign_insights',
    description: 'Obtiene insights y recomendaciones para campa√±as publicitarias',
    inputSchema: {
      type: 'object',
      properties: {
        campaign_id: {
          type: 'string',
          description: 'ID de la campa√±a',
        },
        date_range: {
          type: 'string',
          description: 'Rango de fechas para el an√°lisis',
          enum: ['last_7_days', 'last_30_days', 'last_90_days'],
          default: 'last_30_days'
        },
        metrics: {
          type: 'array',
          items: {
            type: 'string',
            enum: ['ctr', 'cpc', 'cpm', 'conversion_rate', 'roas']
          },
          description: 'M√©tricas espec√≠ficas a analizar',
        },
      },
      required: ['campaign_id'],
    },
  },
  {
    name: 'generate_creative_variations',
    description: 'Genera variaciones de un creativo publicitario para A/B testing',
    inputSchema: {
      type: 'object',
      properties: {
        original_text: {
          type: 'string',
          description: 'Texto original del creativo',
        },
        variations_count: {
          type: 'number',
          description: 'N√∫mero de variaciones a generar',
          minimum: 1,
          maximum: 5,
          default: 3
        },
        focus_area: {
          type: 'string',
          description: '√Årea de enfoque para las variaciones',
          enum: ['headline', 'cta', 'emotional_tone', 'value_proposition'],
        },
        target_audience: {
          type: 'string',
          description: 'Caracter√≠sticas del p√∫blico objetivo',
        },
      },
      required: ['original_text'],
    },
  },
  {
    name: 'optimize_ad_spend',
    description: 'Proporciona recomendaciones para optimizar el gasto publicitario',
    inputSchema: {
      type: 'object',
      properties: {
        current_budget: {
          type: 'number',
          description: 'Presupuesto actual en USD',
        },
        campaign_objective: {
          type: 'string',
          description: 'Objetivo principal de la campa√±a',
          enum: ['awareness', 'traffic', 'engagement', 'leads', 'conversions', 'sales']
        },
        target_cpa: {
          type: 'number',
          description: 'Costo por adquisici√≥n objetivo en USD',
        },
        historical_performance: {
          type: 'string',
          description: 'Datos de rendimiento hist√≥rico (formato JSON string)',
        },
      },
      required: ['current_budget', 'campaign_objective'],
    },
  }
];

class MetaAdsAssistantServer {
  constructor() {
    this.server = new Server(SERVER_INFO, {
      capabilities: {
        tools: {},
      },
    });

    this.setupHandlers();
  }

  setupHandlers() {
    // Handler para listar herramientas
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: TOOLS,
      };
    });

    // Handler para ejecutar herramientas
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      try {
        switch (name) {
          case 'analyze_creative':
            return await this.analyzeCreative(args);
          case 'get_campaign_insights':
            return await this.getCampaignInsights(args);
          case 'generate_creative_variations':
            return await this.generateCreativeVariations(args);
          case 'optimize_ad_spend':
            return await this.optimizeAdSpend(args);
          default:
            throw new McpError(
              ErrorCode.MethodNotFound,
              `Herramienta ${name} no encontrada`
            );
        }
      } catch (error) {
        throw new McpError(
          ErrorCode.InternalError,
          `Error ejecutando herramienta ${name}: ${error instanceof Error ? error.message : String(error)}`
        );
      }
    });
  }

  async analyzeCreative(args) {
    const { creative_url, creative_text, campaign_type, target_audience } = args;

    // Simular an√°lisis de creativo (aqu√≠ integrar√≠as con Gemini AI o tu API)
    const analysis = {
      overall_score: Math.floor(Math.random() * 3) + 7, // Score 7-10
      emotional_appeal: Math.floor(Math.random() * 3) + 7,
      clarity_score: Math.floor(Math.random() * 3) + 8,
      call_to_action_strength: Math.floor(Math.random() * 3) + 7,
      target_alignment: target_audience ? Math.floor(Math.random() * 3) + 8 : 6,
    };

    const insights = [
      `Texto analizado: "${creative_text.substring(0, 100)}${creative_text.length > 100 ? '...' : ''}"`,
      `Tipo de campa√±a: ${campaign_type || 'No especificado'}`,
      `Score general: ${analysis.overall_score}/10`,
      `Atractivo emocional: ${analysis.emotional_appeal}/10`,
      `Claridad del mensaje: ${analysis.clarity_score}/10`,
      `Fuerza del CTA: ${analysis.call_to_action_strength}/10`,
    ];

    if (target_audience) {
      insights.push(`Alineaci√≥n con audiencia: ${analysis.target_alignment}/10`);
    }

    const recommendations = [];
    
    if (analysis.emotional_appeal < 8) {
      recommendations.push('Considera a√±adir m√°s elementos emocionales al copy');
    }
    if (analysis.call_to_action_strength < 8) {
      recommendations.push('El call-to-action podr√≠a ser m√°s espec√≠fico y urgente');
    }
    if (analysis.clarity_score < 8) {
      recommendations.push('Simplifica el mensaje para mayor claridad');
    }
    if (!creative_text.includes('!') && !creative_text.includes('?')) {
      recommendations.push('Considera usar signos de exclamaci√≥n para mayor impacto');
    }

    return {
      content: [
        {
          type: 'text',
          text: `## üìä An√°lisis de Creativo Publicitario

### Puntuaci√≥n General: ${analysis.overall_score}/10

### üéØ Insights:
${insights.map(insight => `‚Ä¢ ${insight}`).join('\n')}

### üí° Recomendaciones:
${recommendations.length > 0 
  ? recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')
  : '‚Ä¢ El creativo est√° bien optimizado, mant√©n el buen trabajo!'
}

### üìà Pr√≥ximos Pasos:
‚Ä¢ Considera hacer A/B testing con variaciones
‚Ä¢ Monitorea m√©tricas de CTR y engagement
‚Ä¢ Ajusta seg√∫n el rendimiento inicial`,
        },
      ],
    };
  }

  async getCampaignInsights(args) {
    const { campaign_id, date_range, metrics } = args;

    // Simular datos de campa√±a
    const mockData = {
      campaign_id,
      period: date_range || 'last_30_days',
      impressions: Math.floor(Math.random() * 50000) + 10000,
      clicks: Math.floor(Math.random() * 2000) + 100,
      spend: Math.floor(Math.random() * 1000) + 100,
      conversions: Math.floor(Math.random() * 50) + 5,
    };

    const ctr = ((mockData.clicks / mockData.impressions) * 100).toFixed(2);
    const cpc = (mockData.spend / mockData.clicks).toFixed(2);
    const conversion_rate = ((mockData.conversions / mockData.clicks) * 100).toFixed(2);
    const roas = ((mockData.conversions * 50) / mockData.spend).toFixed(2); // Asumiendo $50 por conversi√≥n

    const insights = [
      `Campa√±a ID: ${campaign_id}`,
      `Per√≠odo: ${date_range || '√öltimos 30 d√≠as'}`,
      `Impresiones: ${mockData.impressions.toLocaleString()}`,
      `Clics: ${mockData.clicks.toLocaleString()}`,
      `CTR: ${ctr}%`,
      `CPC: $${cpc}`,
      `Conversiones: ${mockData.conversions}`,
      `Tasa de conversi√≥n: ${conversion_rate}%`,
      `ROAS: ${roas}x`,
    ];

    const recommendations = [];
    
    if (parseFloat(ctr) < 1.0) {
      recommendations.push('CTR bajo: considera mejorar el copy y las im√°genes');
    }
    if (parseFloat(cpc) > 2.0) {
      recommendations.push('CPC alto: optimiza la segmentaci√≥n de audiencia');
    }
    if (parseFloat(conversion_rate) < 2.0) {
      recommendations.push('Baja conversi√≥n: revisa la landing page y el funnel');
    }
    if (parseFloat(roas) < 3.0) {
      recommendations.push('ROAS bajo: considera pausar o reoptimizar la campa√±a');
    }

    return {
      content: [
        {
          type: 'text',
          text: `## üìà Insights de Campa√±a

### üìä M√©tricas Clave:
${insights.map(insight => `‚Ä¢ ${insight}`).join('\n')}

### üéØ An√°lisis:
‚Ä¢ **Rendimiento CTR:** ${parseFloat(ctr) >= 1.0 ? '‚úÖ Bueno' : '‚ö†Ô∏è Necesita mejora'}
‚Ä¢ **Eficiencia CPC:** ${parseFloat(cpc) <= 2.0 ? '‚úÖ Eficiente' : '‚ö†Ô∏è Alto'}
‚Ä¢ **Conversiones:** ${parseFloat(conversion_rate) >= 2.0 ? '‚úÖ Buena tasa' : '‚ö†Ô∏è Baja tasa'}
‚Ä¢ **ROAS:** ${parseFloat(roas) >= 3.0 ? '‚úÖ Rentable' : '‚ö†Ô∏è Revisar'}

### üí° Recomendaciones:
${recommendations.length > 0 
  ? recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')
  : '‚Ä¢ La campa√±a est√° funcionando bien, mant√©n el curso!'
}`,
        },
      ],
    };
  }

  async generateCreativeVariations(args) {
    const { original_text, variations_count, focus_area, target_audience } = args;
    const count = variations_count || 3;

    const variations = [];
    
    for (let i = 1; i <= count; i++) {
      let variation = original_text;
      
      switch (focus_area) {
        case 'headline':
          variation = this.modifyHeadline(original_text, i);
          break;
        case 'cta':
          variation = this.modifyCTA(original_text, i);
          break;
        case 'emotional_tone':
          variation = this.modifyEmotionalTone(original_text, i);
          break;
        case 'value_proposition':
          variation = this.modifyValueProposition(original_text, i);
          break;
        default:
          variation = this.generalVariation(original_text, i);
      }
      
      variations.push({
        version: `Variaci√≥n ${i}`,
        text: variation,
        focus: focus_area || 'general',
        suggested_test_split: `${Math.floor(100/count)}%`
      });
    }

    return {
      content: [
        {
          type: 'text',
          text: `## üîÑ Variaciones de Creativo para A/B Testing

### üìù Texto Original:
"${original_text}"

### üéØ Enfoque: ${focus_area || 'Optimizaci√≥n general'}
${target_audience ? `### üë• Audiencia: ${target_audience}` : ''}

### ‚ú® Variaciones Generadas:

${variations.map((v, index) => 
  `**${v.version}** (${v.suggested_test_split}):
"${v.text}"
*Enfoque: ${v.focus}*`
).join('\n\n')}

### üìä Recomendaciones para Testing:
‚Ä¢ Ejecuta las variaciones simult√°neamente
‚Ä¢ Asigna tr√°fico equitativo inicialmente
‚Ä¢ Mide CTR, CPC y conversiones
‚Ä¢ Espera significancia estad√≠stica antes de decidir
‚Ä¢ Considera factores estacionales y temporales`,
        },
      ],
    };
  }

  async optimizeAdSpend(args) {
    const { current_budget, campaign_objective, target_cpa, historical_performance } = args;

    // Simular an√°lisis de optimizaci√≥n
    const recommendations = [];
    const budget_allocation = {};

    // L√≥gica b√°sica de optimizaci√≥n
    if (campaign_objective === 'awareness') {
      budget_allocation.display = '40%';
      budget_allocation.video = '35%';
      budget_allocation.social = '25%';
      recommendations.push('Para awareness, prioriza alcance sobre frecuencia');
      recommendations.push('Usa formatos visuales atractivos');
    } else if (campaign_objective === 'conversions') {
      budget_allocation.search = '50%';
      budget_allocation.retargeting = '30%';
      budget_allocation.lookalike = '20%';
      recommendations.push('Enf√≥cate en audiencias con alta intenci√≥n de compra');
      recommendations.push('Optimiza para conversiones, no clics');
    }

    const suggested_daily_budget = Math.floor(current_budget / 30);
    const bid_recommendation = target_cpa ? target_cpa * 0.7 : suggested_daily_budget * 0.1;

    return {
      content: [
        {
          type: 'text',
          text: `## üí∞ Optimizaci√≥n de Gasto Publicitario

### üìä An√°lisis Actual:
‚Ä¢ Presupuesto total: $${current_budget.toLocaleString()}
‚Ä¢ Objetivo: ${campaign_objective}
‚Ä¢ Presupuesto diario sugerido: $${suggested_daily_budget}
${target_cpa ? `‚Ä¢ CPA objetivo: $${target_cpa}` : ''}

### üéØ Distribuci√≥n Recomendada:
${Object.entries(budget_allocation).map(([channel, percentage]) => 
  `‚Ä¢ ${channel.charAt(0).toUpperCase() + channel.slice(1)}: ${percentage}`
).join('\n')}

### üí° Recomendaciones de Optimizaci√≥n:
${recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')}
‚Ä¢ Bid sugerido: $${bid_recommendation.toFixed(2)} ${target_cpa ? '(70% del CPA objetivo)' : ''}
‚Ä¢ Implementa bid adjustments por dispositivo y hora
‚Ä¢ Usa automated bidding despu√©s de obtener datos suficientes

### üìà Pr√≥ximos Pasos:
‚Ä¢ Monitor daily spend vs. performance
‚Ä¢ Ajusta bids basado en cost per result
‚Ä¢ Pausa ad sets con bajo rendimiento despu√©s de 3-5 d√≠as
‚Ä¢ Escala los ganadores gradualmente (+20-50% budget)`,
        },
      ],
    };
  }

  // M√©todos auxiliares para generar variaciones
  modifyHeadline(text, variation) {
    const headlines = [
      text.replace(/^[^.!?]*/, "üöÄ Descubre el Secreto"),
      text.replace(/^[^.!?]*/, "‚ö° No Te Pierdas Esta Oportunidad"),
      text.replace(/^[^.!?]*/, "üéØ La Soluci√≥n Que Buscabas"),
    ];
    return headlines[variation - 1] || text;
  }

  modifyCTA(text, variation) {
    const ctas = [
      " ¬°Act√∫a Ahora!",
      " ¬°Empieza Hoy!",
      " ¬°Descubre M√°s!",
    ];
    return text + ctas[variation - 1];
  }

  modifyEmotionalTone(text, variation) {
    const tones = [
      text.replace(/\./g, "! ‚ú®"),
      text.replace(/\b(tu|tus)\b/g, "tu incre√≠ble"),
      text.replace(/\b(es|son)\b/g, "resulta ser"),
    ];
    return tones[variation - 1] || text;
  }

  modifyValueProposition(text, variation) {
    const propositions = [
      `üíé OFERTA EXCLUSIVA: ${text}`,
      `üéÅ GRATIS por tiempo limitado: ${text}`,
      `‚≠ê GARANTIZADO o tu dinero de vuelta: ${text}`,
    ];
    return propositions[variation - 1] || text;
  }

  generalVariation(text, variation) {
    const variations = [
      text.replace(/\b\w+/g, (word) => Math.random() > 0.8 ? word.toUpperCase() : word),
      `${text} ¬°No esperes m√°s!`,
      text.replace(/\./g, "... ü§î"),
    ];
    return variations[variation - 1] || text;
  }

  async start() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    
    // Mensaje de bienvenida (solo para debugging, no va al cliente)
    console.error('ü§ñ Meta Ads Creative Assistant MCP Server iniciado');
    console.error('üì± Herramientas disponibles:');
    console.error('   ‚Ä¢ analyze_creative - An√°lisis de creativos');
    console.error('   ‚Ä¢ get_campaign_insights - Insights de campa√±as');
    console.error('   ‚Ä¢ generate_creative_variations - Variaciones A/B');
    console.error('   ‚Ä¢ optimize_ad_spend - Optimizaci√≥n de presupuesto');
  }
}

// Iniciar servidor
if (require.main === module) {
  const server = new MetaAdsAssistantServer();
  server.start().catch(console.error);
}

module.exports = { MetaAdsAssistantServer };